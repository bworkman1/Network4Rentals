<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Payment_handler extends CI_Model {
	
	function payment_handler()
	{
		// Call the Model constructor
		parent::__construct();
	}
	
	function add_payment_note($data)
	{			
		$results = $this->db->get_where('payment_history', array('id'=>$data['payment_id'], 'tenant_id'=>$data['tenant_id'], 'landlord_id'=>$data['landlord_id']));		
		
		if($results->num_rows()>0) {
			$row = $results->row();
		
			if(!empty($row)) {
				$payment_note = array(
					'landlord_id'=>$data['landlord_id'], 
					'tenant_id'=> $row->tenant_id,
					'group_id'=>'', 
					'payment_id'=>$row->id, 
					'note'=>$data['note'],	
					'sent_by'=>'landlord'
				);			
				$this->db->insert('payment_notes', $payment_note);
				if($this->db->affected_rows() != 1) {
					return false;
				} else {
				
				
					return true;
				}
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	

	
	function check_for_valid_tenant($sent_by)
	{
		if($sent_by == 'landlord') {
			$query = $this->db->get_where('renter_history', array('id'=>$this->session->userdata('tenant_info_id')));
			if($query->num_rows()>0) {
				$row = $query->row();
				$temp_id = $this->session->userdata('temp_id');
				if(empty($temp_id)) {
					if($row->group_id != $this->session->userdata('temp_id')) {
						return false;
					} else {
						return $row;
					}
				} else {
					if($row->link_id != $this->session->userdata('user_id')) {
						return false;
					} else {
						return $row;
					}
				}
			} else {
				return false;
			}
		}
		
		
	}
		
	function get_payment_notes($payment_id) 
	{
		$data = array('payment_id'=>$payment_id, 'landlord_id' => $this->session->userdata('user_id'));
		$results = $this->db->get_where('payment_notes', $data);	
		if($results->num_rows()>0) {
			$data = array();
			foreach ($results->result() as $row) {
				$row->ts = date('m-d-Y h:i a', strtotime($row->ts));
				$data[] = $row;
			}
			return $data;
		
		} else {
			return false;
		}
	}
	
	function check_silent_post_link($data) {
		$results = $this->db->get_where('landlords', array('id'=>$data[0], 'user'=>$data[1]));
		if($results->num_rows()>0) {
			return true;
		} else {
			return false;
		}
	}
	
	function update_payment_history($data) {
	
		//THIS FUNCTION RELIES ON THE x_trans_id VALUE TO NOT CHANGE FOR SUBSCRIPTIONS IF THE VALUE DOES CHANGE WE WILL NEED TO LOOK INTO THE SUB ID BUT COULDN"T FIND CLEAR INFO ON THE SUBJECT
	
		//Update payment that was submitted 
		$this->db->limit(1);
		if(!empty($data['x_subscription_id'])) {
			$this->db->where('sub_id', $data['sub_id']);
		} else {
			$this->db->where('trans_id', $data['trans_id']);
		}
		$this->db->where('landlord_id', $data['id']);
		$this->db->where('status', 'Pending');
		$this->db->update('payment_history', array('status'=>$data['status']));
		$updated = $this->db->affected_rows();
		
		if($updated == 0) { //If no rows were found that were pending assume that they payment was an auto payment generated by authorize
			//Check the database for a subscription that matches the details and if autopay is set
			$this->db->limit(1);
			$this->db->order_by('id', 'desc');
			$results = $this->db->get_where('payment_history', array('trans_id'=>$data['trans_id'], 'landlord_id'=>$data['id'], 'status'=>'pending', 'recurring_payment'=>'y'));
			if($results->num_rows()==0) { //AUTO PAY FOUND CREATE NEW RECORD
				$this->db->limit(1);
				$results = $this->db->get_where('payment_history', array('trans_id'=>$data['trans_id']));
				if($results->num_rows()>0) {
					$row = $results->row();
					$data = array(
						'amount' 	=>  number_format($data['amount'], 2),
						'created' 	=>  date('Y-m-d'),	
						'paid_on' 	=>  date('Y-m-d'),
						'status' 	=>	$data['status'],
						'ref_id' 	=>  $row->ref_id,	   
						'tenant_id' =>  $row->tenant_id,
						'payment_type' => 'E-Check',
						'entered_by'   => '1',
						'landlord_id'  => $data['landlord_id'],
						'trans_id' 	   => $data['trans_id'],
						'name'		   => $data['name'],
						'recurring_payment' => $data['recurring_payment'],
						'auto_paid' => 'y'
					);
					$this->db->insert('payment_history', $data);
				}
			}
		}
		
	}
	
	public function log_auth_data($data)
	{	
		if(!empty($data)) {
			$this->db->insert('testing_auth_response', $data);
		}
	}
	
	function payment_data($data) 
	{
		//select and count how many landlords have payments coming to them today
		$sql = 'SELECT paid_on, Count(*) as payments FROM payment_history WHERE MONTH(`paid_on`) = ? AND YEAR(`paid_on`) = ? AND landlord_id = ? GROUP BY DAY(`paid_on`)'; 
		
		$configs = array($data['month'], $data['year'], $this->session->userdata('user_id'));
		$results = $this->db->query($sql, $configs);
		if ($results->num_rows() > 0) {
			$data = array();
			foreach($results->result() as $row) {
				$day = (int)date('d', strtotime($row->paid_on));
				$month = (int)date('m', strtotime($row->paid_on));
				$year = (int)date('Y', strtotime($row->paid_on));
				$data[$day] = '<a href="'.base_url().'landlords/view-daily-payments/'.$year.'/'.$month.'/'.$day.'/" class="highlight-blue toolTips" title="View Payments">'.$row->payments.' Payments</a>';
			}
			return $data;
		}
	}
	
	function retrieve_payments_by_day($year, $month, $day) 
	{
		$sql = '
			SELECT 
				payment_history.id, payment_history.amount, payment_history.paid_on, payment_history.trans_id, payment_history.status, payment_history.ref_id, payment_history.tenant_id, payment_history.recurring_payment, payment_history.payment_type, payment_history.last_updated, payment_history.disputed, payment_history.resolved_date, payment_history.start_date, renters.name, renter_history.rental_address, renter_history.rental_city, renter_history.rental_state
			FROM 
				payment_history
			JOIN renters
				ON payment_history.tenant_id=renters.id
			JOIN renter_history
				ON payment_history.ref_id=renter_history.id
			WHERE 
				MONTH(`paid_on`) = ? AND YEAR(`paid_on`) = ? AND DAY(`paid_on`) = ? AND landlord_id = ?	
		'; 
		
		$configs = array($month, $year, $day, $this->session->userdata('user_id'));
		$results = $this->db->query($sql, $configs);
		if($results->num_rows()>0) {
			$this->load->library('table');
			$this->table->set_heading(array('Name', 'Address', 'Trans Id', 'Payment Type', 'Auto-Pay', 'Amount', 'Date', 'Start Date', 'Options'));
			$tmpl = array (
				'table_open'          => '<div class="listedPayments table-responsive"><table class="table" border="0" cellpadding="4" cellspacing="0">',

				'heading_row_start'   => '<tr>',
				'heading_row_end'     => '</tr>',
				'heading_cell_start'  => '<th>',
				'heading_cell_end'    => '</th>',

				'row_start'           => '<tr>',
				'row_end'             => '</tr>',
				'cell_start'          => '<td>',
				'cell_end'            => '</td>',

				'row_alt_start'       => '<tr>',
				'row_alt_end'         => '</tr>',
				'cell_alt_start'      => '<td>',
				'cell_alt_end'        => '</td>',

				'table_close'         => '</table></div>'
			);
			$this->table->set_template($tmpl);
			
			foreach($results->result() as $val) {
				$startDate = 'NA';
				
				if($val->recurring_payment == 'y') {
					$startDate = date('m-d-Y', strtotime($val->start_date));
					$auto = '<span class="label label-success">Yes</span>';
				} else {
					$auto = '<span class="label label-danger">No</span>';
				}
				if($val->disputed === 'y') {
					$class = 'disputed';
					$disputed = true;
				} else {
					$class = '';
					$disputed = false;
				}
				
				if($val->resolved_date == '0000-00-00') {
					$allow_dispute = true;
				} else {
					$allow_dispute = false;
				}
				
				$data = array($val->name, $val->rental_address.' '.$val->rental_city.' '.$val->rental_state, $val->trans_id, $val->payment_type, $auto, '$'.number_format($val->amount,2), date('m-d-Y', strtotime($val->paid_on)+3600), $startDate, $this->format_button($val->ref_id, $val->id, $val->tenant_id, $disputed, $allow_dispute, $val->recurring_payment, $val->trans_id));
				
				$this->table->add_row(array('data'=>$data, 'class'=>$class, 'id'=>$val->id));
			}
			
			return $this->table->generate();
			
		} else {
			return false;
		}
	}

	function format_button($ref_id, $payment_id, $tenant_id, $disputed, $allow_dispute, $auto, $subId) 
	{	
		if($allow_dispute) {
			if($disputed) {
				$dispute_link = '<li class="divider"></li><li class="dispute-row"><a href="#" class="settleDispute" data-altId="'.$tenant_id.'" data-payment="'.$payment_id.'"><i class="fa fa-flag-o"></i> Settle Dispute</a></li>';
			} else {
				
				$dispute_link = '<li class="divider"></li><li class="dispute-row"><a href="#" class="dispute" data-altId="'.$tenant_id.'" data-payment="'.$payment_id.'"><i class="fa fa-flag-o"></i> Dispute Payment</a></li>';
			}
		}
		
		if($auto == 'y') {
			$cancelAutoPay = '<li><a href="#" data-target="#cancel" class="cancelAutoPayments" data-subid="'.$subId.'" data-tenant="'.$tenant_id.'" data-toggle="modal"><i class="fa fa-times"></i> Cancel Auto Pay</a></li>';
		}

		return '<div class="btn-group pull-right">
		  <button type="button" class="btn btn-warning dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
			Options <span class="caret"></span>
		  </button>
		  <ul class="dropdown-menu" role="menu">
			<li><a href="'.base_url().'landlords/view-tenant-info/'.$ref_id.'"><i class="fa fa-eye"></i> View Tenant Info</a></li>
			<li><a href="'.base_url().'landlords/message-tenant/'.$ref_id.'"><i class="fa fa-comments"></i> Message Tenant</a></li>
			<li><a href="#" class="viewNotes" data-altId="'.$tenant_id.'" data-payment="'.$payment_id.'"><i class="fa fa-folder-open-o"></i> Payment Notes</a></li>
			
			
			'.$dispute_link.$cancelAutoPay.'
		  </ul>
		</div>';
		//<li><a href="#" class="editPayment" data-altId="'.$tenant_id.'" data-payment="'.$payment_id.'"><i class="fa fa-pencil"></i> Edit Payment</a></li>
	}

	function check_for_valid_connection($data) //THIS FUNCTION WILL CHECK TO MAKE SURE THERE IS AN ACTUAL LINK BETWEEN THE TENANT AND LANDLORD
	{
		$data['ref_id'] = $data['payment_id'];
		$results = $this->db->get_where('renter_history', array('tenant_id'=>$data['tenant_id'], 'link_id'=>$data['landlord_id']));
		if($results->num_rows()>0) {
			$results = $this->db->get_where('payment_history', array('id'=>$data['ref_id'], 'landlord_id'=>$data['landlord_id'], 'tenant_id'=>$data['tenant_id']));
			if($results->num_rows()>0) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	function add_new_payment_note($data)
	{
		$history_row = $this->check_for_valid_connection($data);
			
		if($history_row) {
			$this->db->insert('payment_notes', $data);
			$row = $this->db->affected_rows();
			$action_id = $this->db->insert_id();
			if($row>0) {
				
				$info = array(
					'action'=> 'New note left on payment', 
					'user_id'=> $data['tenant_id'], 
					'type'=> 'renters', 
					'action_id'=> $data['payment_id']
				); 
				$this->add_activity_feed($info);
				
				return true;
			} else {
				return false;
			}
		} else {
			return 3;
		}
		
	}
	
	function dispute_payment($id, $alt_id)
	{
		$this->db->where('id', $id);
		$this->db->update('payment_history', array('disputed'=>'y', 'disputed_date' => date('y-m-d')));
		
		$info = array(
			'action'=> 'Your rent payment has been disputed', 
			'user_id'=> $alt_id, 
			'type'=> 'renters', 
			'action_id'=> $id
		); 
		$this->add_activity_feed($info);
	}
	
	// add activity to activity feed
	function add_activity_feed($data) 
	{	
		//Required: action (what was the action) - user_id (who it belongs to) - type (renters / landlords) - action_id (id to link the activity to the action)
		$data['created'] = date('Y-m-d H:i:s');
		$data['ip'] = $_SERVER['REMOTE_ADDR'];
		$this->db->insert('activity', $data); 
	}
	
	function resolve_dispute($id, $alt_id) 
	{
		$this->db->where('id', $id);
		$this->db->where('tenant_id', $alt_id);
		$this->db->where('landlord_id', $this->session->userdata('user_id'));
		$this->db->update('payment_history', array('disputed'=>'n', 'resolved_date' => date('y-m-d')));
		if($this->db->affected_rows()>0) {
		
			$info = array(
				'action'=> 'Resolved Payment Dispute', 
				'user_id'=> $alt_id, 
				'type'=> 'renters', 
				'action_id'=> $id
			); 
			$this->add_activity_feed($info);
			
			return true;
		} else {
			return false;
		}
	}
	
	
	public function cancel_subscription($tenant_id, $sub_id)
	{
		$this->db->select('id');
		$this->db->order_by('id', 'desc');
		$results = $this->db->get_where('payment_history', array('tenant_id'=>$tenant_id, 'landlord_id'=>$this->session->userdata('user_id')));
		if($results->num_rows()>0) {
			$row = $results->row();
			
			$this->load->library('authorize_arb');
			
			$api_settings = $this->get_landlord_api_settings($this->session->userdata('user_id'));
			//$this->encrypt->encode($msg, $key);
			// LEFT OFF HERE NEED TO DECRYPT THE KEYS AND PASS IT TO AUTHROZE CANCEL API
			
			$this->session->set_flashdata('success', 'The Subscription has been cancelled, you will no longer receive payments automatically from the renter.');
		} else {
			$this->session->set_flashdata('error', 'Something went wrong looking up the subscription data, try again. If the problem persist contact us.');
		}
		
	}
	
	private function get_landlord_api_settings($landlord_id)
	{
		$this->db->select('net_api, net_key');
		$results = $this->db->get_where('payment_settings', array('landlord_id'=>$landlord_id));
		if($results->num_rows()>0) {
			return $results->row();
		}
	}
	
}